---
- name: determine lates timestamp  # noqa key-order
  block:
    - name: get files from {{ openproject_recover_from_backup_dir }}
      ansible.builtin.find:
        paths: "{{ openproject_recover_from_backup_dir }}"
        recurse: false
        file_type: file
        patterns: conf-*.tar.gz
      register: _find_conf

    - name: get latest conf file
      ansible.builtin.set_fact:
        openproject_recover_from_backup_timestamp: "{{ (_find_conf.files | sort(attribute='ctime') | last).path | regex_replace('.*/conf-', '') | replace('.tar.gz', '') }}"
      when: _find_conf.matched | int > 0

    - name: debug determined timestamp
      ansible.builtin.debug:
        var: openproject_recover_from_backup_timestamp
        verbosity: 1

  when: openproject_recover_from_backup_timestamp | default(0) | int == 0

- name: assert we have a timestamp
  ansible.builtin.assert:
    that:
      - openproject_recover_from_backup_timestamp | int > 0

- name: find backup files
  ansible.builtin.find:
    paths: "{{ openproject_recover_from_backup_dir }}"
    recurse: false
    file_type: file
    patterns:
      - "*-{{ openproject_recover_from_backup_timestamp }}.tar.gz"
      - "postgresql-dump-{{ openproject_recover_from_backup_timestamp }}.pgdump"
  register: _find_backup_files

- name: extract filenames
  ansible.builtin.set_fact:
    _files_to_process: "{{ _find_backup_files.files | map(attribute='path') }}"

- name: debug _files_to_process
  ansible.builtin.debug:
    var: _files_to_process
    verbosity: 1

- name: define required files
  ansible.builtin.set_fact:
    _required_postgresql: "{{ [openproject_recover_from_backup_dir, 'postgresql-dump-' ~ openproject_recover_from_backup_timestamp ~ '.pgdump'] | path_join }}"
    _required_conf: "{{ [openproject_recover_from_backup_dir, 'conf-' ~ openproject_recover_from_backup_timestamp ~ '.tar.gz'] | path_join }}"
    _required_attachments: "{{ [openproject_recover_from_backup_dir, 'attachments-' ~ openproject_recover_from_backup_timestamp ~ '.tar.gz'] | path_join }}"

- name: define optioonal files
  ansible.builtin.set_fact:
    _optional_svn: "{{ [openproject_recover_from_backup_dir, 'svn-repositories-' ~ openproject_recover_from_backup_timestamp ~ '.tar.gz'] | path_join }}"
    _optional_git: "{{ [openproject_recover_from_backup_dir, 'git-repositories-' ~ openproject_recover_from_backup_timestamp ~ '.tar.gz'] | path_join }}"

- name: debug required files
  ansible.builtin.debug:
    var: item
    verbosity: 1
  with_items:
    - "{{ _required_postgresql }}"
    - "{{ _required_conf }}"
    - "{{ _required_attachments }}"

- name: debug optional files
  ansible.builtin.debug:
    var: item
    verbosity: 1
  with_items:
    - "{{ _optional_svn }}"
    - "{{ _optional_git }}"

- name: assert important files are present
  ansible.builtin.assert:
    that:
      - item in _files_to_process
  with_items:
    - "{{ _required_postgresql }}"
    - "{{ _required_conf }}"
    - "{{ _required_attachments }}"

- name: read old config VARs  # noqa no-changed-when
  ansible.builtin.command: openproject config
  register: _cfg

- name: build old config map
  ansible.builtin.set_fact:
    _cfgmap: "{{ _cfgmap | default({}) | combine({(item | split('='))[0]: (item | split('='))[1]}) }}"
  with_items: "{{ _cfg.stdout_lines }}"

- name: debug old config map
  ansible.builtin.debug:
    var: _cfgmap
    verbosity: 1

- name: ensure openproject service is stopped
  ansible.builtin.service:
    name: openproject
    state: stopped

- name: restoring config  # noqa command-instead-of-module no-changed-when
  ansible.builtin.command:
    cmd: "tar xzf {{ _required_conf }} -C /etc/openproject"
  # notify: openproject reconfigure

- name: preserve cfg settings  # noqa no-changed-when
  ansible.builtin.command:
    cmd: "openproject config:set {{ item }}='{{ _cfgmap[item] }}'"
  with_items: "{{ openproject_recover_from_backup_persisten_cfg_settings }}"
  when: _cfgmap[item] | default('') | length > 0

# we do NOT use values from _cfgmap, as the restore might change some stuff
- name: register _storage_path  # noqa no-changed-when
  ansible.builtin.command: openproject config:get OPENPROJECT_ATTACHMENTS__STORAGE__PATH
  register: _storage_path

- name: debug _storage_path
  ansible.builtin.debug:
    var: _storage_path
    verbosity: 1

- name: register SVN_REPOSITORIES  # noqa no-changed-when
  ansible.builtin.command: openproject config:get SVN_REPOSITORIES
  register: _svn_repositories
  when: _optional_svn in _files_to_process

- name: debug SVN_REPOSITORIES
  ansible.builtin.debug:
    var: _svn_repositories
    verbosity: 1
  when: _optional_svn in _files_to_process

- name: register GIT_REPOSITORIES  # noqa no-changed-when
  ansible.builtin.command: openproject config:get GIT_REPOSITORIES
  register: _git_repositories
  when: _optional_git in _files_to_process

- name: debug GIT_REPOSITORIES
  ansible.builtin.debug:
    var: _git_repositories
    verbosity: 1
  when: _optional_git in _files_to_process

- name: ensure file directory exists
  ansible.builtin.file:
    path: "{{ _storage_path.stdout }}"
    state: directory
    owner: openproject
    group: openproject
    mode: '0755'

- name: restoring attachments  # noqa command-instead-of-module no-changed-when
  ansible.builtin.command:
    cmd: "tar xzf {{ _required_attachments }} -C {{ _storage_path.stdout }}"

- name: ensure svn directory exists
  ansible.builtin.file:
    path: "{{ _storage_path.stdout | default('/var/db/openproject/svn') }}"
    state: directory
    owner: openproject
    group: openproject
    mode: '0755'
  when: _optional_svn in _files_to_process

- name: restoring svn repositories # noqa command-instead-of-module no-changed-when
  ansible.builtin.command:
    cmd: "tar xzf {{ _optional_svn }} -C {{ _storage_path.stdout | default('/var/db/openproject/svn') }}"
  when: _optional_svn in _files_to_process

- name: ensure git directory exists
  ansible.builtin.file:
    path: "{{ _git_repositories.stdout | default('/var/db/openproject/git') }}"
    state: directory
    owner: openproject
    group: openproject
    mode: '0755'
  when: _optional_git in _files_to_process

- name: restoring git repositories # noqa command-instead-of-module no-changed-when
  ansible.builtin.command:
    cmd: "tar xzf {{ _optional_git }} -C {{ _git_repositories.stdout | default('/var/db/openproject/git') }}"
  when: _optional_git in _files_to_process

- name: restoring database # noqa no-changed-when
  ansible.builtin.command:
    cmd: "pg_restore --clean --if-exists {{ openproject_recover_from_backup_dbrestorargs }} --dbname {{ _cfgmap['DATABASE_URL'] }} {{ _required_postgresql }}"
  # notify: openproject reconfigure

- name: run all notified handlers
  ansible.builtin.meta: flush_handlers
  tags:
    - always

- name: ensure openproject service is started
  ansible.builtin.service:
    name: openproject
    state: started
