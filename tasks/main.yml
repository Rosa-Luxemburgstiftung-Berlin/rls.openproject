---

- name: install required packages
  ansible.builtin.apt:
    name: "{{ openproject_required_packages }}"
    update_cache: true

- name: openproject apt key
  ansible.builtin.get_url:
    url: https://dl.packager.io/srv/opf/openproject/key
    dest: /usr/share/keyringspackager-io.asc
    mode: "0644"
  retries: "{{ lookup('env', 'MOLECULE_FILE') | ternary(5, 1) }}"  # for molecule test / github action
  delay: 5

- name: openproject apt repo for debian
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyringspackager-io.asc] https://dl.packager.io/srv/deb/opf/openproject/stable/{{ openproject_main_version }}/{{ ansible_distribution.lower() }} {{ ansible_distribution_major_version }} main
    filename: openproject
  when: ansible_distribution == 'Debian'

- name: openproject apt repo for ubuntu
  ansible.builtin.apt_repository:
    repo: deb [signed-by=/usr/share/keyringspackager-io.asc] https://dl.packager.io/srv/deb/opf/openproject/stable/{{ openproject_main_version }}/{{ ansible_distribution.lower() }} {{ ansible_distribution_version }} main
    filename: openproject
  when: ansible_distribution == 'Ubuntu'

- name: install openproject
  ansible.builtin.apt:
    name: "{{ openproject_package_name | default('openproject') }}"
    update_cache: true

- name: set openproject package on hold
  ansible.builtin.dpkg_selections:
    name: openproject
    selection: hold
  when:
    - openproject_hold_package is defined
    - openproject_hold_package | bool

- name: copy ssl cert files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/ssl/certs/{{ item }}"
    mode: "0640"
    group: root
    owner: root
  notify:
    - openproject restart
    - apache2 restart
  diff: "{{ openproject_show_diff | default(false) | bool }}"
  with_items:
    - "{{ openproject_filename_cert }}"
    - "{{ openproject_filename_key }}"
    - "{{ openproject_filename_ca }}"
  when:
    - openproject_server.ssl == 'yes'
    - item | type_debug != 'NoneType'
    - item | length > 0

- name: deploy installer.dat
  ansible.builtin.template:
    src: installer.dat.j2
    dest: /etc/openproject/installer.dat-preconfig
    backup: true
    mode: "0640"
    owner: openproject
    group: openproject
  diff: "{{ openproject_show_diff | default(false) | bool }}"
  notify: openproject configure

- name: "openproject config:set"  # noqa no-changed-when
  ansible.builtin.command: "openproject config:set {{ item }}"
  notify: openproject restart
  with_items: "{{ openproject_configset }}"

- name: install health check for checkmk
  ansible.builtin.template:
    src: checkmk_health_checks.j2
    dest: /usr/lib/check_mk_agent/local/openproject_health_check
    mode: '0755'
  when: openproject_use_checkmk_check | bool

- name: ensure backup will be performed before upgrade
  ansible.builtin.set_fact:
    openproject_backup_now: true
  when:
    - openproject_upgrade_now is defined
    - openproject_upgrade_now | bool

- name: run backup task
  ansible.builtin.include_tasks: backup_and_upgrade.yml
  tags:
    - backup
    - openproject-backup
  when:
    - openproject_backup_now is defined
    - openproject_backup_now | bool

- name: configure backup cronjob
  ansible.builtin.cron:
    name: "{{ openproject_backup_cron.name }}"
    state: "{{ openproject_backup_cron.state }}"
    hour: "{{ openproject_backup_cron.hour }}"
    minute: "{{ openproject_backup_cron.minute }}"
    job: "{{ openproject_backup_cron.job }}"

- name: run all notified handlers
  ansible.builtin.meta: flush_handlers
  tags:
    - always

- name: run recover task
  ansible.builtin.include_tasks:
    file: recover.yml
    apply:
      tags:
        - recover
        - openproject-recover
        - openproject_recover_from_backup
  when:
    - openproject_recover_from_backup is defined
    - openproject_recover_from_backup | bool

- name: enforce apache to use {{ openproject_server.hostname }}
  ansible.builtin.template:
    src: rewriteurl2fqdn.j2
    dest: /etc/openproject/addons/apache2/includes/vhost/rewriteurl2fqdn.conf
    mode: '0644'
  notify: apache2 restart

- name: include automation tasks
  tags:
    - always
  ansible.builtin.include_tasks:
    file: automation.yml
    apply:
      tags:
        - automation
  when:
    - openproject_automation_api_token is defined
    - openproject_scheduled_recurring_tasks | length > 1

- name: perform migration of PostgreSQL 13 to 17
  tags:
    - always
  ansible.builtin.include_tasks:
    file: pgsql13to17.yml
    apply:
      tags:
        - pgsql13to17
  when:
    - openproject_pgsql13to17 | default(false) | bool
    - openproject_postgres.autoinstall == 'install'

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
